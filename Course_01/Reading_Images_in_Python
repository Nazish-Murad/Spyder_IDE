
# =============================================================================
#               Using PIL, Python Imaging Library
# =============================================================================

from PIL import Image 
import numpy as np   #Use numpy to convert images to arrays

# Read image 
img = Image.open("test_image.jpg") #Not a numpy array
print(type(img))

# Output Images 
img.show() 

# prints format of image 
print(img.format) 
  
# prints mode of image 
print(img.mode) 

#PIL is not by default numpy array but can convert PIL image to numpy array. 
img1 = np.asarray(img)
print(type(img1))

# =============================================================================
#            Using Matplotlib 
# =============================================================================
import matplotlib.image as mpimg 
import matplotlib.pyplot as plt 

img = mpimg.imread("test_image.jpg")  #this is a numpy array
print(type(img))
print(img)

print(img.shape)

plt.imshow(img)
plt.colorbar()   #Puts a color bar next to the image. 


# =============================================================================
# Using scikit image 
# =============================================================================

from skimage import io, img_as_float, img_as_ubyte
import numpy as np
import matplotlib.pyplot as plt 


image = img_as_float(io.imread("test_image.jpg"))

image2 = io.imread("test_image.jpg").astype(np.float)
# avoid using astype as it violates assumptions about dtype range.
# for example float should range from 0 to 1 (or -1 to 1) but if you use 
# astype to convert to float, the values do not lie between 0 and 1. 
print(image.shape)
plt.imshow(img)

print(image)

print(image2)
image8byte = img_as_ubyte(image)
print(image8byte)

# =============================================================================
#  Using openCV #########
# =============================================================================
 

import cv2

grey_img = cv2.imread("test_image.jpg", 0)
color_img = cv2.imread("test_image.jpg", 1)

#images opened using cv2 are numpy arrays
print(type(grey_img)) 
print(type(color_img)) 

# Use the function cv2.imshow() to display an image in a window. 
# First argument is the window name which is a string. second argument is our image. 

cv2.imshow("pic", grey_img)
cv2.imshow("color pic", color_img)

# Maintain output window until 
# user presses a key or 1000 ms (1s)
cv2.waitKey(0)          

#destroys all windows created
cv2.destroyAllWindows() 

#OpenCV imread, imwrite and imshow all work with the BGR order, not RGB
#but there is no need to change the order when you read an image with 
#cv2.imread and then want to show it with cv2.imshow
#if you use matplotlib, it uses RGB. 

import matplotlib.pyplot as plt
plt.imshow(color_img)  

#OpenCV represents RGB images as multi-dimensional NumPy arrays, but as BGR.

#we can convert the images from BGR to RGB
plt.imshow(cv2.cvtColor(color_img, cv2.COLOR_BGR2RGB))

#We can also change color spaces from RGB to HSV..
plt.imshow(cv2.cvtColor(color_img, cv2.COLOR_BGR2HSV))


# =============================================================================
# ### Reading multiple images from a folder
# =============================================================================
import cv2
import glob

#select the path
path = "test_images/aeroplane/*.*"
for file in glob.glob(path):
    print(file)     #just stop here to see all file names printed
    a= cv2.imread(file)  #now, we can read each file since we have the full path
    print(a)  #print numpy arrays for each file

# let us look at each file
    cv2.imshow('Original Image', a)
    cv2.waitKey(0)
    cv2.destroyAllWindows()
    
#process each image - change color from BGR to RGB.
    c = cv2.cvtColor(a, cv2.COLOR_BGR2RGB)
    cv2.imshow('Color image', c)
#wait for 1 second
    k = cv2.waitKey(0)
#destroy the window
    cv2.destroyAllWindows()
